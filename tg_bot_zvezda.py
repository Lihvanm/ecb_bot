from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
    CallbackContext
)
import logging
import time
import os
from bs4 import BeautifulSoup
import requests
from datetime import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
HTML_URL = os.getenv("HTML_URL")
TARGET_GROUP_ID = -1002382138419
ALLOWED_CHAT_IDS = [-1002201488475, -1002437528572, -1002385047417, -1002382138419]
PINNED_DURATION = 2700  # 45 –º–∏–Ω—É—Ç
MESSAGE_STORAGE_TIME = 180  # 3 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
ALLOWED_USER = "@Muzikant1429"
TEMPORARY_ADD_DURATION = 3600  # 1 —á–∞—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤

# –ê–Ω—Ç–∏–º–∞—Ç - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Å—Ç–∏ —Å–ª–æ–≤
BANNED_WORDS = ["–±–ª—è–¥", "—Ö—É–π", "–ø–∏–∑–¥", "–Ω–∞—Ö—É", "–≥–∞–Ω–¥–æ–Ω", "–ø–∏–¥—Ä", "–ø–∏–¥–æ—Ä–∞—Å", "–ø–∏–¥–∞—Ä", "—à–∞–ª–∞–≤", "—à–ª—é—Ö", "–º—Ä–∞–∑—å", "–º—Ä–∞–∑–æ", "–µ–±–∞—Ç", "–µ–±–∞–ª", "–¥–µ–±–∏–ª", "–∏–º–µ–±–µ—Ü–∏–ª", "–≥–æ–≤–Ω—é–∫"]
MESSENGER_KEYWORDS = ["t.me", "telegram", "whatsapp", "viber", "discord", "vk.com", "instagram", "facebook", "twitter", "youtube", "http", "www", ".com", ".ru", ".net", "tiktok"]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_pinned_times = {}
last_user_username = {}
last_thanks_times = {}
pinned_messages = {}  # {chat_id: {"message_id": int, "user_id": int, "text": str, "timestamp": float, "photo_id": int}}
message_storage = {}  # {message_id: {"chat_id": int, "user_id": int, "text": str, "timestamp": float}}
STAR_MESSAGES = {}
banned_users = set()
sent_photos = {}  # {chat_id: message_id} –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
temporary_allowed_chats = {}  # {chat_id: expiry_timestamp}

def clean_text(text: str) -> str:
    return " ".join(text.split()).lower() if text else ""

def load_star_messages():
    try:
        response = requests.get(HTML_URL)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        return {
            clean_text(row.find_all("td")[0].text.strip()): {
                "message": row.find_all("td")[1].text.strip(),
                "photo": row.find_all("td")[2].text.strip() if row.find_all("td")[2].text.strip().startswith("http") else None
            }
            for row in soup.find_all("tr")[1:] if len(row.find_all("td")) >= 3
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return {}

STAR_MESSAGES = load_star_messages()

async def is_admin_or_musician(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username == ALLOWED_USER[1:]:
        return True
    
    try:
        chat_member = await context.bot.get_chat_member(update.effective_chat.id, user.id)
        return chat_member.status in ["administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False

async def cleanup_storage(context: CallbackContext):
    current_time = time.time()
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    expired_messages = [
        msg_id for msg_id, data in message_storage.items() 
        if current_time - data["timestamp"] > MESSAGE_STORAGE_TIME
    ]
    for msg_id in expired_messages:
        del message_storage[msg_id]
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    expired_chats = [
        chat_id for chat_id, expiry in temporary_allowed_chats.items()
        if current_time > expiry
    ]
    for chat_id in expired_chats:
        del temporary_allowed_chats[chat_id]
        logger.info(f"–ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")

async def unpin_message(context: CallbackContext):
    job = context.job
    chat_id = job.chat_id
    
    if chat_id in pinned_messages:
        try:
            await context.bot.unpin_chat_message(chat_id, pinned_messages[chat_id]["message_id"])
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è: {e}")
        finally:
            if "photo_id" in pinned_messages[chat_id] and pinned_messages[chat_id]["photo_id"] == sent_photos.get(chat_id):
                try:
                    await context.bot.delete_message(chat_id, pinned_messages[chat_id]["photo_id"])
                    del sent_photos[chat_id]
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            
            del pinned_messages[chat_id]
            if chat_id in last_pinned_times:
                del last_pinned_times[chat_id]

async def check_pinned_message_exists(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> bool:
    try:
        chat = await context.bot.get_chat(chat_id)
        if chat.pinned_message and chat.pinned_message.message_id == pinned_messages.get(chat_id, {}).get("message_id"):
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    return False

async def process_new_pinned_message(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user, text: str, is_edit: bool = False):
    current_time = time.time()
    message = update.message or update.edited_message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google —Ç–∞–±–ª–∏—Ü—É
    text_cleaned = clean_text(text)
    target_message = None
    for word in text_cleaned.split():
        if word in STAR_MESSAGES:
            target_message = STAR_MESSAGES[word]
            break
    
    try:
        if is_edit and chat_id in sent_photos and pinned_messages.get(chat_id, {}).get("user_id") == user.id:
            try:
                await context.bot.delete_message(chat_id, sent_photos[chat_id])
                del sent_photos[chat_id]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
        
        photo_message = None
        if target_message and target_message["photo"]:
            photo_message = await context.bot.send_photo(
                chat_id=chat_id,
                photo=target_message["photo"]
            )
            sent_photos[chat_id] = photo_message.message_id
        
        await message.pin()
        
        pinned_messages[chat_id] = {
            "message_id": message.message_id,
            "user_id": user.id,
            "text": text,
            "timestamp": current_time,
            "photo_id": photo_message.message_id if photo_message else None
        }
        
        last_pinned_times[chat_id] = current_time
        last_user_username[chat_id] = user.username or f"id{user.id}"
        
        context.job_queue.run_once(unpin_message, PINNED_DURATION, chat_id=chat_id)
        
        if chat_id == TARGET_GROUP_ID:
            logger.info(f"–ó–ß –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç @{user.username}")
            return
        
        await process_target_group_forward(update, context, chat_id, user, text, target_message, current_time, is_edit)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def process_target_group_forward(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     source_chat_id: int, user, text: str, 
                                     target_message: dict, current_time: float,
                                     is_edit: bool = False):
    try:
        target_has_active_pin = (TARGET_GROUP_ID in pinned_messages and 
                                current_time - pinned_messages[TARGET_GROUP_ID]["timestamp"] < PINNED_DURATION)
        
        if target_has_active_pin and pinned_messages[TARGET_GROUP_ID].get("source_chat_id") == source_chat_id:
            await context.bot.unpin_chat_message(TARGET_GROUP_ID, pinned_messages[TARGET_GROUP_ID]["message_id"])
            if "photo_id" in pinned_messages[TARGET_GROUP_ID]:
                try:
                    await context.bot.delete_message(TARGET_GROUP_ID, pinned_messages[TARGET_GROUP_ID]["photo_id"])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ: {e}")
            del pinned_messages[TARGET_GROUP_ID]
            target_has_active_pin = False
        
        if not target_has_active_pin:
            forwarded_text = target_message["message"] if target_message else f"üåü {text.replace('üåü', '').strip()}"
            
            forwarded = await context.bot.send_message(
                chat_id=TARGET_GROUP_ID,
                text=forwarded_text
            )
            
            await forwarded.pin()
            
            pinned_messages[TARGET_GROUP_ID] = {
                "message_id": forwarded.message_id,
                "user_id": user.id,
                "text": forwarded_text,
                "timestamp": current_time,
                "source_chat_id": source_chat_id
            }
            
            context.job_queue.run_once(unpin_message, PINNED_DURATION, chat_id=TARGET_GROUP_ID)
            
            if target_message and target_message["photo"]:
                try:
                    photo_message = await context.bot.send_photo(
                        chat_id=TARGET_GROUP_ID,
                        photo=target_message["photo"]
                    )
                    pinned_messages[TARGET_GROUP_ID]["photo_id"] = photo_message.message_id
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É: {e}")
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã: {e}")

async def process_duplicate_message(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user):
    current_time = time.time()
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    if current_time - last_thanks_times.get(chat_id, 0) > 180:
        last_user = last_user_username.get(chat_id, "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        thanks = await context.bot.send_message(
            chat_id=chat_id,
            text=f"@{user.username or user.id}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ó–≤–µ–∑–¥–∞ —á–∞—Å–∞ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {last_user}. –ù–∞–¥–µ—é—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏–º–µ–Ω–Ω–æ –í—ã —Å—Ç–∞–Ω–µ—Ç–µ –Ω–∞—à–µ–π üåü!!!"
        )
        context.job_queue.run_once(
            lambda ctx: ctx.bot.delete_message(chat_id=chat_id, message_id=thanks.message_id),
            180
        )
        last_thanks_times[chat_id] = current_time

async def handle_message_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.edited_message:
        return
    
    edited_msg = update.edited_message
    chat_id = edited_msg.chat.id
    user = edited_msg.from_user
    
    if (chat_id in pinned_messages and 
        pinned_messages[chat_id]["message_id"] == edited_msg.message_id and
        (pinned_messages[chat_id]["user_id"] == user.id or await is_admin_or_musician(update, context))):
        
        text = edited_msg.text or edited_msg.caption
        
        if not await check_message_allowed(update, context, chat_id, user, text):
            return
        
        await process_new_pinned_message(update, context, chat_id, user, text, is_edit=True)

async def handle_message_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.left_chat_member or update.message.new_chat_members:
        return
        
    chat_id = update.message.chat.id
    message_id = update.message.message_id
    
    if chat_id in pinned_messages and pinned_messages[chat_id]["message_id"] == message_id:
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è –ó–ß –≤ —á–∞—Ç–µ {chat_id}")
        
        if chat_id in last_pinned_times:
            del last_pinned_times[chat_id]
        
        del pinned_messages[chat_id]
        
        if chat_id in sent_photos:
            try:
                await context.bot.delete_message(chat_id, sent_photos[chat_id])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            del sent_photos[chat_id]

async def check_message_allowed(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user, text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.id in banned_users:
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    current_time = time.time()
    if chat_id not in ALLOWED_CHAT_IDS and chat_id not in temporary_allowed_chats:
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
        temporary_allowed_chats[chat_id] = current_time + TEMPORARY_ADD_DURATION
        logger.info(f"–ß–∞—Ç {chat_id} –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –Ω–∞ {TEMPORARY_ADD_DURATION} —Å–µ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç (–∏—â–µ–º —á–∞—Å—Ç–∏ —Å–ª–æ–≤)
    if text and any(re.search(re.escape(word), text.lower()) for word in BANNED_WORDS):
        try:
            await update.message.delete()
            warn = await context.bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
            context.job_queue.run_once(
                lambda ctx: ctx.bot.delete_message(chat_id=chat_id, message_id=warn.message_id),
                10
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞—Ç–æ–º: {e}")
        return False
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
    if text and any(re.search(re.escape(keyword), text.lower()) for keyword in MESSENGER_KEYWORDS):
        try:
            await update.message.delete()
            warn = await context.bot.send_message(chat_id, "–†–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")
            context.job_queue.run_once(
                lambda ctx: ctx.bot.delete_message(chat_id=chat_id, message_id=warn.message_id),
                10
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã: {e}")
        return False
    
    return True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message = update.message or update.edited_message
        if not message:
            return
            
        user = message.from_user
        chat_id = message.chat.id
        text = message.text or message.caption
        current_time = time.time()
        
        if not await check_message_allowed(update, context, chat_id, user, text):
            return

        if text and any(marker in text.lower() for marker in ["–∑–≤–µ–∑–¥–∞", "–∑—á", "üåü"]):
            try:
                chat = await context.bot.get_chat(chat_id)
                current_pinned = chat.pinned_message
                
                if chat_id in pinned_messages:
                    if not current_pinned or current_pinned.message_id != pinned_messages[chat_id]["message_id"]:
                        del pinned_messages[chat_id]
                        if chat_id in last_pinned_times:
                            del last_pinned_times[chat_id]
                        if chat_id in sent_photos:
                            try:
                                await context.bot.delete_message(chat_id, sent_photos[chat_id])
                                del sent_photos[chat_id]
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            can_pin = True
            if chat_id in pinned_messages:
                last_pin_time = pinned_messages[chat_id]["timestamp"]
                if current_time - last_pin_time < PINNED_DURATION:
                    can_pin = False
            
            if can_pin:
                await process_new_pinned_message(update, context, chat_id, user, text)
            else:
                if await is_admin_or_musician(update, context):
                    await process_new_pinned_message(update, context, chat_id, user, text, is_edit=True)
                    correction = await context.bot.send_message(
                        chat_id=chat_id,
                        text="–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–≤–µ–∑–¥—ã —á–∞—Å–∞ –æ—Ç –ê–¥–º–∏–Ω–∞."
                    )
                    context.job_queue.run_once(
                        lambda ctx: ctx.bot.delete_message(chat_id=chat_id, message_id=correction.message_id),
                        10
                    )
                else:
                    await process_duplicate_message(update, context, chat_id, user)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def delete_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /del –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º–∏"""
    if not await is_admin_or_musician(update, context):
        resp = await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!")
        context.job_queue.run_once(
            lambda ctx: ctx.bot.delete_message(chat_id=update.message.chat.id, message_id=resp.message_id),
            10
        )
        await update.message.delete()
        return
    
    if not update.message.reply_to_message:
        resp = await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!")
        context.job_queue.run_once(
            lambda ctx: ctx.bot.delete_message(chat_id=update.message.chat.id, message_id=resp.message_id),
            10
        )
        await update.message.delete()
        return
    
    try:
        await update.message.reply_to_message.delete()
        await update.message.delete()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {update.effective_user.username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        resp = await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        context.job_queue.run_once(
            lambda ctx: ctx.bot.delete_message(chat_id=update.message.chat.id, message_id=resp.message_id),
            10
        )

async def reset_pin_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin_or_musician(update, context):
        resp = await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        context.job_queue.run_once(
            lambda ctx: ctx.bot.delete_message(chat_id=update.message.chat.id, message_id=resp.message_id),
            10
        )
        await update.message.delete()
        return
        
    chat_id = update.message.chat.id
    if chat_id in pinned_messages:
        await context.bot.unpin_chat_message(chat_id, pinned_messages[chat_id]["message_id"])
        del pinned_messages[chat_id]
    if chat_id in last_pinned_times:
        del last_pinned_times[chat_id]
        
    resp = await update.message.reply_text("–¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω, –º–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –ó–ß.")
    context.job_queue.run_once(
        lambda ctx: ctx.bot.delete_message(chat_id=chat_id, message_id=resp.message_id),
        10
    )
    await update.message.delete()

async def update_google_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin_or_musician(update, context):
        resp = await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        context.job_queue.run_once(
            lambda ctx: ctx.bot.delete_message(chat_id=update.message.chat.id, message_id=resp.message_id),
            10
        )
        await update.message.delete()
        return
    
    global STAR_MESSAGES
    STAR_MESSAGES = load_star_messages()
    
    resp = await update.message.reply_text(f"Google —Ç–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(STAR_MESSAGES)} –∑–∞–ø–∏—Å–µ–π.")
    context.job_queue.run_once(
        lambda ctx: ctx.bot.delete_message(chat_id=update.message.chat.id, message_id=resp.message_id),
        10
    )
    await update.message.delete()

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    job_queue = app.job_queue
    job_queue.run_repeating(cleanup_storage, interval=60, first=10)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("timer", reset_pin_timer))
    app.add_handler(CommandHandler("google", update_google_table))
    app.add_handler(CommandHandler("del", delete_message_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.ALL & filters.UpdateType.EDITED_MESSAGE, handle_message_edit))
    app.add_handler(MessageHandler(filters.ALL & filters.UpdateType.MESSAGE, handle_message_delete))
    
    app.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    main()
