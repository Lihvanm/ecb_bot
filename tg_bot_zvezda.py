import logging
import re
import os
import time
import asyncio
import psycopg2
from psycopg2.extras import DictCursor
from datetime import datetime
from telegram import Update, ChatPermissions
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv('DATABASE_URL')
BOT_TOKEN = os.getenv('BOT_TOKEN')
TARGET_GROUP_ID = int(os.getenv('TARGET_GROUP_ID'))

# –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (45 –º–∏–Ω—É—Ç = 2700 —Å–µ–∫—É–Ω–¥)
PINNED_DURATION = 2700

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞
ALLOWED_USER = "@Muzikant1429"

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–∞–Ω—Ç–∏–º–∞—Ç)
BANNED_WORDS = ["–±–ª—è–¥", "—Ö—É–π", "–ø–∏–∑–¥", "–Ω–∞—Ö—É", "–≥–∞–Ω–¥–æ–Ω", "–ø–∏–¥—Ä", "–ø–∏–¥–æ—Ä–∞—Å", "–ø–∏–¥–∞—Ä", "—à–∞–ª–∞–≤", "—à–ª—é—Ö", "–º—Ä–∞–∑—å", "–º—Ä–∞–∑–æ", "–µ–±–∞—Ç"]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ –∏ —Å—Å—ã–ª–æ–∫
MESSENGER_KEYWORDS = [
    "t.me", "telegram", "whatsapp", "viber", "discord", "vk.com", "instagram",
    "facebook", "twitter", "youtube", "http", "www", ".com", ".ru", ".net", "tiktok"
]

# –õ–∏–º–∏—Ç—ã –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
SPAM_LIMIT = 4  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
SPAM_INTERVAL = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MUTE_DURATION = 360  # –í—Ä–µ–º—è –º—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_pinned_times = {}  # {chat_id: timestamp}
last_user_username = {}  # {chat_id: username}
last_zch_times = {}  # {chat_id: timestamp}
last_thanks_times = {}  # {chat_id: timestamp}
pinned_messages = {}  # {chat_id: message_id}
db_initialized = False  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
banned_users = set()  # –ë–∞–Ω-–ª–∏—Å—Ç

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = psycopg2.connect(DATABASE_URL)
    conn.cursor_factory = DictCursor
    return conn

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS pinned_messages (
            id SERIAL PRIMARY KEY,
            chat_id BIGINT,
            user_id BIGINT,
            username TEXT,
            message_text TEXT,
            timestamp BIGINT
        )
    ''')
    cur.execute('''
        CREATE TABLE IF NOT EXISTS active_users (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            username TEXT,
            delete_count INTEGER,
            timestamp BIGINT
        )
    ''')
    cur.execute('''
        CREATE TABLE IF NOT EXISTS birthdays (
            id SERIAL PRIMARY KEY,
            user_id BIGINT UNIQUE,
            username TEXT,
            birth_date TEXT,
            last_congratulated_year INTEGER
        )
    ''')
    cur.execute('''
        CREATE TABLE IF NOT EXISTS ban_list (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            username TEXT,
            phone TEXT,
            ban_time BIGINT
        )
    ''')
    cur.execute('''
        CREATE TABLE IF NOT EXISTS ban_history (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            username TEXT,
            reason TEXT,
            timestamp BIGINT
        )
    ''')
    conn.commit()
    cur.close()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin_or_musician(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user = update.message.from_user
    chat_id = update.message.chat.id

    try:
        chat_member = await context.bot.get_chat_member(chat_id, user.id)
        if chat_member.status in ["administrator", "creator"]:
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

    if user.username == ALLOWED_USER[1:]:
        return True

    return False

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
async def delete_system_message(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    try:
        await context.bot.delete_message(chat_id=job.chat_id, message_id=job.data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /timer
async def reset_pin_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    user = update.message.from_user

    if not await is_admin_or_musician(update, context):
        response = await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=chat_id)
        await update.message.delete()
        return

    last_pinned_times[chat_id] = 0

    try:
        await context.bot.unpin_all_chat_messages(chat_id=chat_id)
        logger.info(f"–û—Ç–∫—Ä–µ–ø–ª–µ–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ {chat_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ {chat_id}: {e}")

    success_message = await update.message.reply_text("–¢–∞–π–º–µ—Ä –∑–∞–∫—Ä–µ–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.")
    context.job_queue.run_once(delete_system_message, 10, data=success_message.message_id, chat_id=chat_id)
    await update.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    chat_id = message.chat.id
    text = message.text
    current_time = int(time.time())

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –≤ –±–∞–∑–µ –±–æ—Ç–∞
    if user.id in banned_users:
        try:
            await message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
    if message.chat.type not in ['group', 'supergroup']:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä "–∑—á" –∏–ª–∏ "üåü"
    if not text.lower().startswith(("–∑–≤–µ–∑–¥–∞", "–∑—á")) and "üåü" not in text:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏–º–∞—Ç –∏ –∞–Ω—Ç–∏—Ä–µ–∫–ª–∞–º—É
    if not await is_admin_or_musician(update, context):
        # –ê–Ω—Ç–∏–º–∞—Ç
        if any(word in text.lower() for word in BANNED_WORDS):
            await message.delete()
            warning_message = await context.bot.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ!"
            )
            context.job_queue.run_once(delete_system_message, 10, data=warning_message.message_id, chat_id=chat_id)
            return

        # –ê–Ω—Ç–∏—Ä–µ–∫–ª–∞–º–∞
        if any(re.search(rf"\b{re.escape(keyword)}\b", text.lower()) for keyword in MESSENGER_KEYWORDS):
            await message.delete()
            warning_message = await context.bot.send_message(
                chat_id=chat_id,
                text="–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞!"
            )
            context.job_queue.run_once(delete_system_message, 10, data=warning_message.message_id, chat_id=chat_id)
            return

        # –ê–Ω—Ç–∏—Å–ø–∞–º
        user_id = user.id
        if user_id in last_zch_times:
            if current_time - last_zch_times[user_id] < SPAM_INTERVAL:
                await message.delete()
                warning_message = await context.bot.send_message(
                    chat_id=chat_id,
                    text="–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π! –í—ã –∑–∞–º—å—é—á–µ–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç."
                )
                context.job_queue.run_once(delete_system_message, 10, data=warning_message.message_id, chat_id=chat_id)

                # –ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 5 –º–∏–Ω—É—Ç
                try:
                    await context.bot.restrict_chat_member(
                        chat_id=chat_id,
                        user_id=user_id,
                        permissions=ChatPermissions(can_send_messages=False),
                        until_date=int(time.time()) + MUTE_DURATION
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {MUTE_DURATION} —Å–µ–∫—É–Ω–¥.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—å—é—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                return
        last_zch_times[user_id] = current_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    try:
        chat = await context.bot.get_chat(chat_id)
        pinned_message = chat.pinned_message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
        pinned_message = None

    # –ï—Å–ª–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
    if pinned_message is None:
        try:
            await message.pin()
            last_pinned_times[chat_id] = current_time
            last_user_username[chat_id] = user.username if user.username else None

            conn = get_db_connection()
            cur = conn.cursor()
            try:
                cur.execute('''
                    INSERT INTO pinned_messages (chat_id, user_id, username, message_text, timestamp)
                    VALUES (%s, %s, %s, %s, %s)
                ''', (chat_id, user.id, user.username, text, current_time))
                conn.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                conn.rollback()
            finally:
                cur.close()
                conn.close()

            context.job_queue.run_once(unpin_last_message, PINNED_DURATION, chat_id=chat_id)

            if chat_id != TARGET_GROUP_ID:
                new_text = text.replace("üåü ", "").strip()
                forwarded_message = await context.bot.send_message(chat_id=TARGET_GROUP_ID, text=new_text)
                await forwarded_message.pin()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return

    last_pinned_time = last_pinned_times.get(chat_id, 0)
    if current_time - last_pinned_time < PINNED_DURATION:
        if not await is_admin_or_musician(update, context):
            await message.delete()
            return
        else:
            try:
                await message.pin()
                last_pinned_times[chat_id] = current_time
                last_user_username[chat_id] = user.username if user.username else None

                conn = get_db_connection()
                cur = conn.cursor()
                try:
                    cur.execute('''
                        INSERT INTO pinned_messages (chat_id, user_id, username, message_text, timestamp)
                        VALUES (%s, %s, %s, %s, %s)
                    ''', (chat_id, user.id, user.username, text, current_time))
                    conn.commit()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                    conn.rollback()
                finally:
                    cur.close()
                    conn.close()

                correction_message = await context.bot.send_message(
                    chat_id=chat_id,
                    text="–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–≤–µ–∑–¥—ã —á–∞—Å–∞ –æ—Ç –ê–¥–º–∏–Ω–∞."
                )
                context.job_queue.run_once(delete_system_message, 10, data=correction_message.message_id, chat_id=chat_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.pin()
        last_pinned_times[chat_id] = current_time
        last_user_username[chat_id] = user.username if user.username else None

        conn = get_db_connection()
        cur = conn.cursor()
        try:
            cur.execute('''
                INSERT INTO pinned_messages (chat_id, user_id, username, message_text, timestamp)
                VALUES (%s, %s, %s, %s, %s)
            ''', (chat_id, user.id, user.username or user.first_name, text, current_time))
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            conn.rollback()
        finally:
            cur.close()
            conn.close()

        if chat_id != TARGET_GROUP_ID:
            try:
                new_text = text.replace("üåü ", "").strip()
                forwarded_message = await context.bot.send_message(chat_id=TARGET_GROUP_ID, text=new_text)
                await forwarded_message.pin()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É: {e}")

        context.job_queue.run_once(unpin_last_message, PINNED_DURATION, chat_id=chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    global db_initialized
    if not db_initialized:
        init_db()
        db_initialized = True

    global banned_users
    banned_users = set()

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute('SELECT user_id FROM ban_list')
        rows = cur.fetchall()
        banned_users = {row['user_id'] for row in rows}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    finally:
        if 'cur' in locals():
            cur.close()
        if 'conn' in locals():
            conn.close()

    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("timer", reset_pin_timer))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await application.run_polling()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        loop.close()
